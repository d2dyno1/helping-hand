@using dotnetBB.Models.Request

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserService UserService

<EditForm
    Model="@Model"
    FormName="@FormName" 
    OnValidSubmit="@Submit" 
    data-form-name="@FormName"
    class="d-flex flex-column login-form flex-grow-1" 
    method="post">
    <DataAnnotationsValidator/>
    @if (Error != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi-x-circle-fill me-2"></i> @Error
        </div>
    }
    <div class="row mb-3">
        <label for="username" class="col-sm-3 col-form-label">Username</label>
        <div class="col-sm-9">
            <InputText id="username" class="form-control" @bind-Value="Model.Username"/>
            <ValidationMessage For="() => Model.Username"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="email" class="col-sm-3 col-form-label">Email</label>
        <div class="col-sm-9">
            <InputText id="email" class="form-control" @bind-Value="Model.Email"/>
            <ValidationMessage For="() => Model.Email"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="password" class="col-sm-3 col-form-label">Password</label>
        <div class="col-sm-9">
            <InputText type="password" id="password" class="form-control" @bind-Value="Model.Password"/>
            <ValidationMessage For="() => Model.Password"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="confirm-password" class="col-sm-3 col-form-label">Confirm password</label>
        <div class="col-sm-9">
            <InputText type="password" id="confirm-password" class="form-control" @bind-Value="Model.ConfirmPassword"/>
            <ValidationMessage For="() => Model.ConfirmPassword"/>
        </div>
    </div>
    <hr/>
    
    @if (IsRegistering)
    {
        <button class="btn btn-primary align-self-center" disabled>
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            <span role="status">Registering...</span>
        </button>
    }
    else
    {
        <button type="submit" class="btn btn-primary align-self-center">Register</button>
    }
</EditForm>

<script>
    function submitRegisterForm(formName) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: "/auth/register",
                type: "POST",
                data: $(`form[data-form-name=${formName}]`).serialize(),
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                success: () => {
                    document.location.href = "/"; 
                },
                error: xhr => {
                    reject(xhr.responseText);  
                }
            });
        });
    }
</script>

@code {
    [SupplyParameterFromForm]
    private RegistrationModel Model { get; set; } = new();

    [Parameter]
    public string FormName { get; set; } = nameof(RegisterForm);
    
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private bool IsRegistering { get; set; }
    private string? Error { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new();
    }

    private async Task Submit()
    {
        IsRegistering = true;
        if (HttpContext is not null)
        {
            try
            {
                var user = await UserService.CreateAsync(Model.Username, Model.Email, Model.Password);
                await UserService.LogInAsync(user, HttpContext);
                HttpContext.Response.Redirect("/");
            }
            catch (ArgumentException e)
            {
                Error = e.Message;
                IsRegistering = false;
            }
            catch (Exception e)
            {
                Error = "An unexpected error has occurred.";
                IsRegistering = false;
            }

            return;
        }

        try
        {
            await JSRuntime.InvokeAsync<string>("submitRegisterForm", FormName);
        }
        catch (JSException e)
        {
            Error = e.Message;
            IsRegistering = false;
        }
    }
}