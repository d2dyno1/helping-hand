@using Sodium

@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject NavigationManager NavigationManager

<EditForm Model="@Model" FormName="@FormName" OnValidSubmit="@Submit" class="d-flex flex-column login-form flex-grow-1" method="post">
    <DataAnnotationsValidator/>
    @if (Error != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi-x-circle-fill me-2"></i> @Error
        </div>
    }
    <div class="row mb-3">
            <label for="username" class="col-sm-3 col-form-label">Username</label>
            <div class="col-sm-9">
                <InputText id="username" class="form-control" @bind-Value="Model!.Username"/>
                <ValidationMessage For="() => Model.Username"/>
            </div>
        </div>
    <div class="row mb-3">
        <label for="email" class="col-sm-3 col-form-label">Email</label>
        <div class="col-sm-9">
            <InputText id="email" class="form-control" @bind-Value="Model!.Email"/>
            <ValidationMessage For="() => Model.Email"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="password" class="col-sm-3 col-form-label">Password</label>
        <div class="col-sm-9">
            <InputText type="password" id="password" class="form-control" @bind-Value="Model!.Password"/>
            <ValidationMessage For="() => Model.Password"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="confirm-password" class="col-sm-3 col-form-label">Confirm password</label>
        <div class="col-sm-9">
            <InputText type="password" id="confirm-password" class="form-control" @bind-Value="Model!.ConfirmPassword"/>
            <ValidationMessage For="() => Model.ConfirmPassword"/>
        </div>
    </div>
    <hr/>
    
    @if (IsRegistering)
    {
        <button class="btn btn-primary align-self-center" disabled>
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            <span role="status">Registering...</span>
        </button>
    }
    else
    {
        <button type="submit" class="btn btn-primary align-self-center">Register</button>
    }
</EditForm>

@code {
    [SupplyParameterFromForm] 
    public RegistrationModel? Model { get; set; } = new();

    [Parameter]
    public string FormName { get; set; } = "loginForm";

    private bool IsRegistering { get; set; }
    private string? Error { get; set; }
    
    public async Task Submit()
    {
        IsRegistering = true;
        Error = await RegisterAsync();
        if (Error is null)
        {
            NavigationManager.Refresh(true);
            return;
        }
        
        IsRegistering = false;
    }

    private async Task<string?> RegisterAsync()
    {
        await using var context = await ApplicationDbContextFactory.CreateDbContextAsync();

        if (await context.Users.AnyAsync(user => user.Username == Model.Username))
        {
            return "This username is already in use.";
        }
        if (await context.Users.AnyAsync(user => user.Email == Model.Email))
        {
            return "This email address is already in use.";
        }
        
        try
        {
            await context.Users.AddAsync(new User
            {
                Email = Model.Email,
                Username = Model.Username,
                HashedPassword = PasswordHash.ArgonHashString(Model.Password)
            });
            await context.SaveChangesAsync();
        }
        catch (Exception e)
        {
            // TODO Logging
            return "An unexpected error has occurred.";
        }

        return null;
    }
    
    public class RegistrationModel
    {
        [Required]
        public string Username { get; set; }
        
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        
        [Required]
        [MaxLength(128)]
        public string Password { get; set; }
        
        [Required]
        [Compare("Password")]
        public string ConfirmPassword { get; set; }
    }
}