@using System.ComponentModel.DataAnnotations
<EditForm Model="@Model" FormName="@FormName" OnValidSubmit="@Submit" class="d-flex flex-column login-form flex-grow-1" method="post">
    <DataAnnotationsValidator/>
    @if (Error != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi-x-circle-fill me-2"></i> @Error
        </div>
    }
    <div class="row mb-3">
        <label for="email" class="col-sm-3 col-form-label">Email</label>
        <div class="col-sm-9">
            <InputText id="email" class="form-control" @bind-Value="Model!.Email"/>
            <ValidationMessage For="() => Model.Email"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="password" class="col-sm-3 col-form-label">Password</label>
        <div class="col-sm-9">
            <InputText type="password" id="password" class="form-control" @bind-Value="Model!.Password"/>
            <ValidationMessage For="() => Model.Password"/>
        </div>
    </div>
    <div class="row mb-3">
        <label for="confirm-password" class="col-sm-3 col-form-label">Confirm password</label>
        <div class="col-sm-9">
            <InputText type="password" id="confirm-password" class="form-control" @bind-Value="Model!.ConfirmPassword"/>
            <ValidationMessage For="() => Model.ConfirmPassword"/>
        </div>
    </div>
    <hr/>
    
    @if (IsLoggingIn)
    {
        <button id="logging-in" class="btn btn-primary align-self-center" disabled>
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            <span role="status">Registering...</span>
        </button>
    }
    else
    {
        <button type="submit" class="btn btn-primary align-self-center">Register</button>
    }
</EditForm>

@code {
    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        
        [Required]
        [MinLength(12)]
        [MaxLength(128)]
        public string Password { get; set; }
        
        [Compare("Password")]
        public string ConfirmPassword { get; set; }
    }

    [SupplyParameterFromForm] 
    public LoginModel? Model { get; set; } = new();

    [Parameter]
    public string FormName { get; set; } = "loginForm";

    private bool IsLoggingIn { get; set; }
    private string? Error { get; set; }
    
    public async Task Submit()
    {
        IsLoggingIn = true;
        await Task.Delay(1000);
        IsLoggingIn = false;
        Error = "Error";
    }
}