@attribute [Authorize]
@page "/account/contact"
@using PomocKolezenska.Models.Database

@layout AccountLayout

@inject ApplicationDbContext ApplicationDbContext
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1 class="mb-4">Informacje o koncie</h1>

<FieldSet>
    <div>
        <h6>Specjalizacja w przedmiotach</h6>
        <div class="p-2 rounded-2 bg-body-tertiary">
            <Field Label="Przedmioty:">
                @foreach (var subject in Subjects)
                {
                    <SubjectCheckBox Subject="@subject"/>
                }
            </Field>
        </div>
    </div>
    
    <div>
        <h6>Dane kontaktowe</h6>
        <div class="p-2 rounded-2 bg-body-tertiary d-flex flex-column gap-1">
            <Field Label="E-mail:">
                <input placeholder="Twój email" class="form-control" @bind="Email"/>
            </Field>
            <Field Label="Numer telefonu:">
                <input placeholder="Twój numer telefonu" class="form-control" @bind="PhoneNumber"/>
            </Field>
        </div>
    </div>
</FieldSet>

@code
{
    
    private string _email;
    private string _phoneNumber;
    
    public List<Subject> Subjects { get; set; } = [];

    private string Email
    {
        get => _email;
        set
        {
            _email = value;
            UpdateContactInformationAsync(true);
        }
    }

    private string PhoneNumber
    {
        get => _phoneNumber;
        set
        {
            _phoneNumber = value;
            UpdateContactInformationAsync(false);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetUser(ApplicationDbContext, AuthenticationStateProvider);
        if (user is null)
            return;
        
        Subjects = ApplicationDbContext.Subjects.ToList();

        Email = user.ContactEmailAddress;
        PhoneNumber = user.ContactPhoneNumber;
    }

    private async Task UpdateContactInformationAsync(bool a)
    {
        var user = await UserService.GetUser(ApplicationDbContext, AuthenticationStateProvider);
        if (user is null)
            return;

        if (a)
            user.ContactEmailAddress = Email;
        else
            user.ContactPhoneNumber = PhoneNumber;
        ApplicationDbContext.Update(user);
        await ApplicationDbContext.SaveChangesAsync();
    }
}