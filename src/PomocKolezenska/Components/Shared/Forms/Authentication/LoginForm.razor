@using PomocKolezenska.Models.Request
@using Microsoft.AspNetCore.Mvc

@attribute [IgnoreAntiforgeryToken]

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserService UserService

<EditForm
    Model="@Model"
    FormName="LoginForm"
    OnValidSubmit="@Submit"
    Enhance="true"
    id="login-form"
    class="d-flex flex-column login-form flex-grow-1">

    <DataAnnotationsValidator/>
    @if (Error != null)
    {
        <div class="alert alert-danger" role="alert" id="error-container">
            <i class="bi-x-circle-fill me-2"></i> <label id="error-text">@Error</label>
        </div>
    }

    <FieldSet>
        <Field>
            <label>Email:</label>
            <InputText placeholder="Wprowadź email" class="form-control" @bind-Value="Model.EmailOrUsername" />
            <ValidationMessage For="() => Model.EmailOrUsername"/>
        </Field>
        <Field>
            <label>Hasło:</label>
            <InputText placeholder="Wprowadź hasło" type="password" class="form-control" @bind-Value="Model.Password"/>
            <ValidationMessage For="() => Model.Password"/>
        </Field>
        <Field>
            <div class="for-check">
                <input class="form-check-input" type="checkbox" id="remember">
                <label class="form-check-label" for="remember">Zapamiętaj mnie</label>
            </div>
        </Field>
    </FieldSet>
    <hr/>

    @if (IsLoggingIn)
    {
        <button class="btn btn-primary align-self-center" disabled>
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
        </button>
    }
    else
    {
        <button type="submit" class="btn btn-primary align-self-center">Zaloguj się</button>
    }
</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();
    private bool IsLoggingIn { get; set; }
    private string? Error { get; set; }

    private async Task Submit()
    {
        IsLoggingIn = true;
        Error = null;
 
        try
        {
            await JSRuntime.InvokeAsync<string>("ajaxPostAsync", "login-form", "/auth/login");
            NavigationManager.NavigateTo("/", true);
        }
        catch (JSException e)
        {
            Error = e.Message;
            IsLoggingIn = false;
        }
    }
}